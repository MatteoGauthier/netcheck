#!/bin/bash

# Terminal colors and styling
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'
BOLD='\033[1m'

# Get terminal width
TERM_WIDTH=$(tput cols)

# Function to create a horizontal line
create_line() {
    printf '%*s\n' "${TERM_WIDTH}" '' | tr ' ' '─'
}

# Function to create a box with content
create_box() {
    local title="$1"
    local content="$2"
    local width=$((TERM_WIDTH/2 - 2))
    
    echo -e "${BLUE}┌$title"
    echo -e "$content${NC}"
    echo -e "${BLUE}└$(printf '%*s\n' "$width" '' | tr ' ' '─')${NC}"
}

# Function to get all network interfaces with status
get_network_interfaces() {
    echo -e "${BOLD}Network Interfaces:${NC}"
    ifconfig | \
    awk -v D=$(route -n get default | \
        grep interface | \
        awk '{print $2}') '
    BEGIN {
        I = "";
    }
    /^[a-zA-Z0-9]/ {
        I = substr($1, 1, length($1) - 1);
    }
    /inet / {
        printf("%3s %s %s\n", ((D == I) ? "*" : " "), I, $2);
    }'
}

# Function to get network services order
get_network_services() {
    echo -e "${BOLD}Network Services:${NC}"
    networksetup -listallnetworkservices | while read line; do
        if [[ $line != *"An asterisk"* ]]; then
            echo "  $line"
        fi
    done
}

# Function to get hardware ports
get_hardware_ports() {
    echo -e "${BOLD}Hardware Ports:${NC}"
    
    # Create a temporary file for the data
    local tmp_file=$(mktemp)
    
    # Add header
    printf "%-25s %-10s %-20s\n" "Hardware Port" "Device" "MAC Address" > "$tmp_file"
    printf "%s\n" "─────────────────────────── ────────── ────────────────────" >> "$tmp_file"
    
    # Process and format the data
    local port="" device="" mac=""
    while IFS= read -r line; do
        if [[ $line == Hardware* ]]; then
            port="${line#Hardware Port: }"
        elif [[ $line == Device* ]]; then
            device="${line#Device: }"
        elif [[ $line == Ethernet* ]]; then
            mac="${line#Ethernet Address: }"
            printf "%-25s %-10s %-20s\n" "$port" "$device" "$mac" >> "$tmp_file"
        fi
    done < <(networksetup -listallhardwareports)
    
    # Use column to format the output
    echo "  ┌───────────────────────────────────────────────────────────┐"
    column -t "$tmp_file" | while IFS= read -r line; do
        echo "  │ $line │"
    done
    echo "  └───────────────────────────────────────────────────────────┘"
    
    # Clean up
    rm "$tmp_file"
}

# Function to get active interfaces with IPs
get_active_interfaces() {
    echo -e "${BOLD}Active Interfaces with IPv4:${NC}"
    for interface in $(networksetup -listallhardwareports | awk '/^Device:/ {print $2}'); do
        ip=$(ipconfig getifaddr $interface)
        if [ -n "$ip" ]; then
            echo "  $interface: $ip"
        fi
    done
}

# Function to get geolocation information
get_geolocation() {
    local public_ip=$(curl -s https://api.ipify.org)
    local geo_info=$(curl -s "http://ip-api.com/json/${public_ip}")
    local status=$(echo $geo_info | jq -r '.status')
    
    echo -e "${BOLD}IP Information:${NC}"
    if [ "$status" = "success" ]; then
        echo "  Public IP: $public_ip"
        echo "  Country: $(echo $geo_info | jq -r '.country')"
        echo "  Region: $(echo $geo_info | jq -r '.regionName')"
        echo "  City: $(echo $geo_info | jq -r '.city')"
        echo "  ZIP: $(echo $geo_info | jq -r '.zip')"
        echo "  Coordinates: $(echo $geo_info | jq -r '.lat')°, $(echo $geo_info | jq -r '.lon')°"
        echo "  Timezone: $(echo $geo_info | jq -r '.timezone')"
        echo -e "\n${BOLD}Network Information:${NC}"
        echo "  ISP: $(echo $geo_info | jq -r '.isp')"
        echo "  Organization: $(echo $geo_info | jq -r '.org')"
        echo "  AS: $(echo $geo_info | jq -r '.as')"
    else
        echo "  ${RED}Failed to retrieve IP information${NC}"
    fi
}

# Function to test connection
test_connection() {
    echo -e "${BOLD}Connection Status:${NC}"
    
    # Test ping to different services
    local google_ping=$(ping -c 3 8.8.8.8 2>/dev/null | tail -1 | awk '{print $4}' | cut -d '/' -f 2)
    local cloudflare_ping=$(ping -c 3 1.1.1.1 2>/dev/null | tail -1 | awk '{print $4}' | cut -d '/' -f 2)
    
    echo "  Ping (Google DNS): ${google_ping:-Error} ms"
    echo "  Ping (Cloudflare): ${cloudflare_ping:-Error} ms"
    
    # Test download speed
    echo -ne "  Download speed: "
    local download_speed=$(curl -s --output /dev/null https://speed.cloudflare.com/1mb \
        -w "%{speed_download}" 2>/dev/null)
    if [ -n "$download_speed" ]; then
        download_mbps=$(echo "scale=2; $download_speed/131072" | bc)
        echo "${download_mbps} Mbps"
    else
        echo "${RED}Failed${NC}"
    fi
    
    # Test upload speed
    echo -ne "  Upload speed: "
    local upload_speed=$(curl -s --upload-file /dev/null https://speed.cloudflare.com/1mb \
        -w "%{speed_upload}" 2>/dev/null)
    if [ -n "$upload_speed" ]; then
        upload_mbps=$(echo "scale=2; $upload_speed/131072" | bc)
        echo "${upload_mbps} Mbps"
    else
        echo "${RED}Failed${NC}"
    fi
    
    # DNS resolution test
    local dns_time=$(dig +tries=1 +timeout=2 google.com | grep "Query time:" | awk '{print $4}')
    echo "  DNS Resolution: ${dns_time:-Error} ms"
}

# Function to scan local network (requires sudo)
scan_local_network() {
    local default_interface=$(route -n get default | grep 'interface:' | grep -o '[^ ]*$')
    echo -e "${BOLD}Local Network Scan (${default_interface}):${NC}"
    if command -v arp-scan &> /dev/null; then
        sudo arp-scan --interface=$default_interface --localnet 2>/dev/null | \
        grep -v "Starting" | grep -v "Interface:" | grep -v "Ending" | \
        while read -r line; do
            echo "  $line"
        done
    else
        echo "  arp-scan not installed. Install with: brew install arp-scan"
    fi
}

# Main function
main() {
    clear
    echo -e "${YELLOW}${BOLD}NetCheck - Network Monitoring Tool${NC}"
    create_line
    
    # Network Interfaces Section
    create_box "Network Interfaces and Status" "$(get_network_interfaces)"
    
    # Network Services Section
    create_box "Network Configuration" "$(get_network_services)

$(get_hardware_ports)

$(get_active_interfaces)"
    
    # Connection Status and Geolocation
    create_box "Connection Information" "$(test_connection)

$(get_geolocation)"
    
    # Local Network Scan
    create_box "Local Network Devices" "$(scan_local_network)"
    
    create_line
    echo -e "${BLUE}Press Ctrl+C to exit${NC}"
}

# Check for required tools
check_requirements() {
    local missing_tools=()
    
    if ! command -v jq >/dev/null 2>&1; then
        missing_tools+=("jq")
    fi
    if ! command -v dig >/dev/null 2>&1; then
        missing_tools+=("dig")
    fi
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        echo "Missing required tools: ${missing_tools[*]}"
        echo "Please install them using: brew install ${missing_tools[*]}"
        exit 1
    fi
}

# Run checks and main function
check_requirements
main
